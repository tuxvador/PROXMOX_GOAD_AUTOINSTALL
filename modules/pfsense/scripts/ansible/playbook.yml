# code: language=ansible

- name: Pfsnese playbook
  hosts: pfsense
  gather_facts: false
  vars:
    hex_chars: "0123456789abcdef"

  tasks:
    - name: Check default password is already changed for second connection
      ansible.builtin.command:
        cmd: /usr/sbin/false
      register: test
      changed_when: false
      ignore_errors: true
      ignore_unreachable: true

    - name: Use non default password to connect
      ansible.builtin.set_fact:
        ansible_password: "{{ new_pfs_pwd }}"
      when: test.unreachable is defined

    - name: Register the content of /etc/master.passwd
      ansible.builtin.command:
        cmd: grep -E '\$2[ayb]\$10\$13u6q.{46}d2' /etc/master.passwd
      changed_when: false
      register: isdefault
      failed_when: isdefault.rc not in [0, 1]

    - name: Print if password is not default
      ansible.builtin.debug:
        msg: "Password is not default"
      when: isdefault.rc != 0

    - name: Print if password is default
      ansible.builtin.debug:
        msg: "Password is default"
      when: isdefault.rc == 0

    - name: Change default password for root and admin user
      pfsensible.core.pfsense_user:
        name: "{{ item | split(':') | first }}"
        password: "{{ new_pfs_pwd_hash }}"
      loop: "{{ isdefault.stdout_lines }}"
      when: isdefault.rc == 0

    - name: Update pfsense password
      ansible.builtin.set_fact:
        ansible_password: "{{ new_pfs_pwd }}"

    - name: Set authorized key from file
      ansible.posix.authorized_key:
        user: "admin"
        state: present
        key: "{{ lookup('file', ansible_ssh_pub_file) }}"

    - name: Gather facts about host
      ansible.builtin.setup:

    - name: Gather Facts
      ansible.builtin.debug:
        var:
          ansible_facts["all_ipv4_addresses"]

    - name: Check dir lxml exixts
      ansible.builtin.stat:
        path: /usr/local/lib/python3.11/site-packages/lxml
      register: dir_1

    - name: Check dir lxml-5.2.2.dist-info exists
      ansible.builtin.stat:
        path: /usr/local/lib/python3.11/site-packages/lxml-5.2.2.dist-info
      register: dir_2

    - name: Copy python package lxml,for ansible xml to edit /conf/config.xml, skips if directories exixts
      ansible.builtin.copy:
        src: ../../../../package_lxml-5.2.2/site-packages/
        dest: /usr/local/lib/python3.11/site-packages/
        mode: preserve
        remote_src: false
        force: false
      when: not dir_1.stat.exists and not dir_2.stat.exists

# Aliases -----------------------------
    - name: Create alaias for proxmox wan ip
      pfsensible.core.pfsense_alias:
        name: PM_WAN_IP
        type: host
        address: "{{ PM_WAN_IP }}"

    - name: Create alaias for proxmox lan ip
      pfsensible.core.pfsense_alias:
        name: PM_LAN_IP
        type: host
        address: "{{ PM_LAN_IP }}"

    - name: Create alaias for pfsense wan network
      pfsensible.core.pfsense_alias:
        name: WAN_NETWORK
        descr: goad_OPENVPN
        type: network
        address: "{{ WAN_NETWORK }}"

    - name: Create alaias for pfsense lan network
      pfsensible.core.pfsense_alias:
        name: LAN_NETWORK
        type: network
        address: "{{ LAN_NETWORK }}"

    - name: Create alaias for pfsense vlan10 network
      pfsensible.core.pfsense_alias:
        name: VLAN10_NETWORK
        type: network
        address: "{{ VLAN10_NETWORK }}"

    - name: Create alaias for pfsense vlan20 network
      pfsensible.core.pfsense_alias:
        name: VLAN20_NETWORK
        type: network
        address: "{{ VLAN20_NETWORK }}"

    - name: Create alias for http and ssh
      pfsensible.core.pfsense_alias:
        name: HTTP_SSH
        type: port
        address: 22,80

    - name: Create alias for goad vpn port
      pfsensible.core.pfsense_alias:
        name: GOAD_VPN_PORT
        type: port
        address: "{{ GOAD_VPN_PORT }}"

    - name: Create alaias for goad vpn network vlan20 network
      pfsensible.core.pfsense_alias:
        name: GOAD_VPN
        type: network
        address: "{{ GOAD_VPN_NETWORK }}"
# Aliases -----------------------------

# Vlans------------------------------------
    - name: Configure Vlan10
      pfsensible.core.pfsense_vlan:
        vlan_id: "{{ VLAN10_ID }}"
        interface: OPT1
        descr: "{{ VLAN10_DESC }}"
        state: present

    - name: Configure Vlan20
      pfsensible.core.pfsense_vlan:
        vlan_id: "{{ VLAN20_ID }}"
        interface: OPT1
        descr: "{{ VLAN20_DESC }}"
        state: present
# Vlans-----------------------------------

# Firewall config edition, modification of config.xml
    - name: Check if sshguard_whitelist is in config
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/system/sshguard_whitelist
        count: true
      register: hits

    - name: Whitelist ip or network used for ssh login, skips if already in file
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/system
        pretty_print: true
        add_children:
          - sshguard_whitelist: "{{ whitelist_ssh_network }}"
        state: present
      when: hits.count < 1

    - name: Check if disablechecksumoffloading is in config
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/system/disablechecksumoffloading
        count: true
      register: hits

    - name: Disable hardware checksum offloading, skips if already in file
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/system
        pretty_print: true
        add_children:
          - disablechecksumoffloading: " "
        state: present
      when: hits.count < 1
# Firewall config edition, modification of config.xml

# Firewall configuration using ansible module pfsensiblecore

    - name: Setup hostname,domain,language,timserver,timezone
      pfsensible.core.pfsense_setup:
        hostname: "{{ PFS_HOSTNAME }}"
        domain: "{{ PM_DOMAIN }}"
        dns_hostnames: "{{ PM_DNS_HOSTNAME }}"
        dns_addresses: "{{ PM_DNS_IP }}"
        language: en_US
        session_timeout: 180
        timezone: Europe/Paris
        timeservers: 216.239.35.12 216.239.35.4 216.239.35.8 # Google timeservers

    - name: Configure Wan interface
      pfsensible.core.pfsense_interface:
        interface: "{{ PFS_WAN_INTERFACE }}"
        descr: WAN
        enable: true
        blockpriv: false
        blockbogons: true
        ipv4_type: static
        ipv4_address: "{{ PFS_WAN_IP }}"
        ipv4_gateway: WANGW
        ipv4_prefixlen: "{{ WAN_MASK }}"

    - name: Configure Lan interface
      pfsensible.core.pfsense_interface:
        interface: "{{ PFS_LAN_INTERFACE }}"
        descr: LAN
        enable: true
        blockpriv: false
        blockbogons: true
        ipv4_type: static
        ipv4_address: "{{ PFS_LAN_IP }}"
        ipv4_prefixlen: "{{ LAN_MASK }}"
        # ipv4_gateway: LANGW

    - name: Disable default lan rules
      pfsensible.core.pfsense_rule:
        name: Default allow LAN to any rule
        interface: LAN
        state: absent

    - name: Disable default lan rules ipv6
      pfsensible.core.pfsense_rule:
        name: Default allow LAN IPv6 to any rule
        interface: LAN
        state: absent

    - name: WAN Allow ICMP to firewall
      pfsensible.core.pfsense_rule:
        name: WAN Allow ICMP TO firewall
        interface: WAN
        protocol: icmp
        ipprotocol: inet
        source: any
        destination: any
        action: pass

    - name: WAN allow SSH and HTTP
      pfsensible.core.pfsense_rule:
        name: Allow ssh on wan interface
        interface: WAN
        protocol: tcp
        ipprotocol: inet
        source: PM_WAN_IP
        destination: "{{ PFS_WAN_IP }}"
        destination_port: HTTP_SSH
        action: pass

    - name: WAN trrafic on vpn port
      pfsensible.core.pfsense_rule:
        name: WAN trrafic on vpn port
        interface: WAN
        protocol: udp
        ipprotocol: inet
        source: any
        destination: WAN_NETWORK
        destination_port: "{{ GOAD_VPN_PORT }}"
        action: pass

    - name: Block all traffic on WAN
      pfsensible.core.pfsense_rule:
        name: Block all traffic on WAN
        interface: WAN
        protocol: any
        ipprotocol: inet46
        source: any
        destination: any
        action: block

    - name: ALlow all traffic from LAN to OUTSIDE
      pfsensible.core.pfsense_rule:
        name: ALlow traffic from LAN to OUTSIDE
        interface: LAN
        protocol: any
        ipprotocol: inet
        source: LAN_NETWORK
        destination: any
        action: pass

    - name: Block all traffic on LAN
      pfsensible.core.pfsense_rule:
        name: Block all traffic on LAN
        interface: LAN
        protocol: any
        ipprotocol: inet46
        source: any
        destination: any
        action: block

    - name: Configure Vlan10 interface
      pfsensible.core.pfsense_interface:
        interface: "{{ PFS_VLAN10_INTERFACE }}"
        descr: "{{ VLANTAG10NAME }}"
        enable: true
        blockpriv: false
        blockbogons: true
        ipv4_type: static
        ipv4_address: "{{ VLANTAG10_ipv4 }}"

    - name: ALlow traffic from VLAN10 to OUTSIDE
      pfsensible.core.pfsense_rule:
        name: ALlow traffic from VLAN10 to OUTSIDE
        interface: "{{ VLANTAG10NAME }}"
        protocol: any
        ipprotocol: inet
        source: VLAN10_NETWORK
        destination: any
        action: pass

    - name: ALlow traffic to goad vpn network
      pfsensible.core.pfsense_rule:
        name: ALlow traffic to goad vpn network
        interface: "{{ VLANTAG10NAME }}"
        protocol: any
        ipprotocol: inet
        source: VLAN10_NETWORK
        destination: "{{ GOAD_VPN_NETWORK }}"
        action: pass

    - name: Block all traffic on VLAN10
      pfsensible.core.pfsense_rule:
        name: Block all traffic on VLAN10
        interface: "{{ VLANTAG10NAME }}"
        protocol: any
        ipprotocol: inet46
        source: any
        destination: any
        action: block

    - name: Configure Vlan20 interface
      pfsensible.core.pfsense_interface:
        interface: "{{ PFS_VLAN20_INTERFACE }}"
        descr: "{{ VLANTAG20NAME }}"
        enable: true
        blockpriv: false
        blockbogons: true
        ipv4_type: static
        ipv4_address: "{{ VLANTAG20_ipv4 }}"

# Enable DHCP for vlans via config.xml
    - name: Configure DHCP backend
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/dhcpbackend
        pretty_print: true
        state: present
        value: isc

    - name: Check if dhcp enabled for vlan10 enable
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/dhcpd/opt2
        count: true
      register: hits

    - name: Check if interface for vlan10 is present an create if not
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/dhcpd
        pretty_print: true
        add_children:
          - opt2: ""
        state: present
      when: hits.count < 1

    - name: Check if dhcp enabled on vlan10 interface
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/dhcpd/opt2/enable
        count: true
      register: hits

    - name: Enable DHCP for vlan10 enable
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/dhcpd/opt2
        input_type: xml
        pretty_print: true
        add_children:
          - "<enable> </enable>"
          - "<range><from>{{  VLAN10_DHCP_START }}</from><to>{{ VLAN10_DHCP_END }}</to></range>"
        state: present
      when: hits.count < 1

    - name: Check if interface for vlan20 is present
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/dhcpd/opt3
        count: true
      register: hits

    - name: Create interface for vlan20 if absent
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/dhcpd
        pretty_print: true
        add_children:
          - opt3: ""
        state: present
      when: hits.count < 1

    - name: Check if dhcp if dhcp is enable on vlan20 interface
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/dhcpd/opt3/enable
        count: true
      register: hits

    # - name: Enable DHCP for vlan20 enable if not enabled
    #   community.general.xml:
    #     path: /cf/conf/config.xml
    #     xpath: /pfsense/dhcpd/opt3
    #     input_type: xml
    #     pretty_print: true
    #     add_children:
    #       - "<enable> </enable>"
    #       - "<range><from>{{  VLAN20_DHCP_START }}</from><to>{{ VLAN20_DHCP_END }}</to></range>"
    #     state: present
    #   when: hits.count < 1

# DHCP Registration and static registration via config.xml
    - name: Check if regdhcp is in config
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/unbound/regdhcp
        count: true
      register: hits

    - name: Enable DHCP Registration, skips if already in file
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/unbound
        pretty_print: true
        add_children:
          - regdhcp: " "
        state: present
      when: hits.count < 1

    - name: Check if regdhcpstatic is in config
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/unbound/regdhcpstatic
        count: true
      register: hits

    - name: Enable static DHCP Registration, skips if already in file
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/unbound
        pretty_print: true
        add_children:
          - regdhcpstatic: " "
        state: present
      when: hits.count < 1

# group user and cert creation for pfsense openvpn
    - name: Create goad user group
      pfsensible.core.pfsense_group:
        name: "goad-vpn"
        state: present
        descr: "group for goad vpn users"

    - name: Create goad user
      pfsensible.core.pfsense_user:
        name: goaduser
        state: present
        descr: used to login to goad
        scope: user
        groups:
          - "goad-vpn"
        password: $2y$10$Vo4nNYHfWe0Sh3PmbvYyceh9x7nxwcAAXmsV4o3.W.vlPuDCqjqW6

    - name: Check if CA is in config
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/ca
        count: true
      register: hits

    - name: Insert CA tag in config
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense
        pretty_print: true
        add_children:
          - ca: " "
        state: present
      when: hits.count < 1

    - name: Check if CA cert is in config
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/ca/crt
        count: true
      register: hits

    - name: Generate random 13-character hex string
      ansible.builtin.set_fact:
        refid: "{{ query('community.general.random_string', length=13, upper=false, lower=false, override_special=hex_chars, numbers=false) | join('') }}"

    - name: Insert CA cert in config
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/ca
        pretty_print: true
        add_children:
          - refid: "{{ refid }}"
          - descr: "CA-TEST"
          - trust: "disabled"
          - crt: "{{ lookup('file', '../../../../files/openvpn/certs/ca-cert.pem') | b64encode }}"
        state: present
      when: hits.count < 1

    - name: Check if CA private key is in config
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/ca/prv
        count: true
      register: hits

    - name: Insert CA key in config
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/ca
        pretty_print: true
        add_children:
          - prv: "{{ lookup('file', '../../../../files/openvpn/certs/ca-key.pem') | b64encode }}"
        state: present
      when: hits.count < 1

    - name: Insert SERVER CERT AND  KEY in config
      pfsensible.core.pfsense_cert:
        state: present
        name: SERVER-TEST
        ca: CA-TEST
        certtype: server
        method: internal
        certificate: "{{ lookup('file', '../../../../files/openvpn/certs/goad-cert.pem') }}"
        key: "{{ lookup('file', '../../../../files/openvpn/certs/goad-key.pem') }}"

    - name: Insert USER CERT AND  KEY in config
      pfsensible.core.pfsense_cert:
        state: present
        name: USER-TEST
        ca: CA-TEST
        certtype: user
        method: internal
        certificate: "{{ lookup('file', '../../../../files/openvpn/certs/user-cert.pem') }}"
        key: "{{ lookup('file', '../../../../files/openvpn/certs/user-key.pem') }}"

    - name: Check user cert is present
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: /pfsense/system/user[name='goaduser']/cert
        count: true
      register: hits

    - name: GET refid
      community.general.xml:
        path: /cf/conf/config.xml
        xpath: "/pfsense/cert[descr='USER-TEST']/refid"
        content: text
      register: refid

    - name: Insert user cert
      community.general.xml:
        state: present
        path: /cf/conf/config.xml
        xpath: /pfsense/system/user[name='goaduser']
        pretty_print: true
        add_children:
          - cert: "{{ refid.matches[0].refid }}"
      when: hits.count < 1

    - name: Configure SERVER
      pfsensible.core.pfsense_openvpn_server:
        state: present
        name: GOAD-VPN-SERVER
        mode: server_tls_user
        ca: CA-TEST
        local_port: "{{ GOAD_VPN_PORT }}"
        cert: SERVER-TEST
        tunnel_network: 10.10.10.0/24
        local_network: 192.168.10.0/24
        maxclients: 5
        topology: net30
        dns_server1: 192.168.10.1
        push_register_dns: true
        custom_options: auth-nocache
# Certificates -----------------------------

# Enable DNS query forwarding to make the hosts in vlans be able to resolve names
    - name: Create goad user group
      pfsensible.core.pfsense_dns_resolver:
        state: present
        sslcert: SERVER-TEST
        dnssec: true
        forwarding: true
        regdhcp: true
        regdhcpstatic: true

# Configure OPENVPN server rules
    - name: Openvpn allow VLAN10 access
      pfsensible.core.pfsense_rule:
        name: Openvpn allow VLAN10 access
        interface: OpenVPN
        protocol: any
        ipprotocol: inet46
        source: any
        destination: VLAN10_NETWORK
        action: pass

    - name: Openvpn block all
      pfsensible.core.pfsense_rule:
        name: Openvpn block all
        interface: OpenVPN
        protocol: any
        ipprotocol: inet46
        source: any
        destination: any
        action: block
# Enable DHCP for vlans via config.xml
